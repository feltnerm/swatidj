// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports, module) {
    var Backbone, Playlist, PlaylistTrack;
    Backbone = require('backbone');
    PlaylistTrack = (function(_super) {

      __extends(PlaylistTrack, _super);

      function PlaylistTrack() {
        return PlaylistTrack.__super__.constructor.apply(this, arguments);
      }

      PlaylistTrack.prototype.defaults = {
        played: false,
        selected: false
      };

      return PlaylistTrack;

    })(Backbone.Model);
    return Playlist = (function(_super) {
      var PlaylistTrackView, PlaylistView, getPlayed;

      __extends(Playlist, _super);

      function Playlist() {
        return Playlist.__super__.constructor.apply(this, arguments);
      }

      Playlist.prototype.model = PlaylistTrack;

      Playlist.prototype.url = '/api/0.1/playlist/';

      getPlayed = function(track) {
        return track.get("played");
      };

      Playlist.prototype.played = function() {
        return this.filter(getPlayed);
      };

      Playlist.prototype.remaining = function() {
        return this.without.apply(this, this.played());
      };

      Playlist.prototype.comparator = function(track) {
        return parseInt(track.get('pos'));
      };

      PlaylistTrackView = (function(_super1) {

        __extends(PlaylistTrackView, _super1);

        function PlaylistTrackView() {
          return PlaylistTrackView.__super__.constructor.apply(this, arguments);
        }

        PlaylistTrackView.prototype.tagName = 'tr';

        PlaylistTrackView.prototype.initialize = function() {
          return _.bindAll(this);
        };

        PlaylistTrackView.prototype.render = function() {
          $(this.el).html("<tr>" + (this.model.get(pos)) + "</tr>                <tr>" + (this.model.get('title')) + "</tr>                <tr>" + (this.model.get('artist')) + "</tr>");
          return this;
        };

        return PlaylistTrackView;

      })(Backbone.View);

      PlaylistView = (function(_super1) {

        __extends(PlaylistView, _super1);

        function PlaylistView() {
          return PlaylistView.__super__.constructor.apply(this, arguments);
        }

        PlaylistView.prototype.tagName = "tbody";

        PlaylistView.prototype["class"] = "playlistTable";

        PlaylistView.prototype.el = "playlist";

        PlaylistView.prototype.initialize = function() {
          _.bindAll(this);
          this.collection = new Playlist;
          this.collection.bind('add', this.appendItem);
          this.counter = 0;
          return this.render();
        };

        PlaylistView.prototype.render = function() {
          $(this.el).html(this);
          return this;
        };

        PlaylistView.prototype.appendTrack = function(track) {
          var playlist_track_view;
          playlist_track_view = new PlaylistTrackView({
            model: track
          });
          return $(this.el + 'tbody').append(playlist_track_view.render().el);
        };

        return PlaylistView;

      })(Backbone.View);

      return Playlist;

    })(Backbone.Collection);
  });

}).call(this);

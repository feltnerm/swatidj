// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone', 'mustache', 'app/models/currenttrack', 'app/views/coverart', 'app/views/metadata'], function($, _, Backbone, Mustache, CurrentTrackModel, CoverartView, MetadataView) {
  var CurrentTrackView;
  CurrentTrackView = (function(_super) {

    __extends(CurrentTrackView, _super);

    function CurrentTrackView() {
      this.remove = __bind(this.remove, this);

      this.render = __bind(this.render, this);
      return CurrentTrackView.__super__.constructor.apply(this, arguments);
    }

    CurrentTrackView.prototype.el = "#current-track";

    CurrentTrackView.prototype.initialize = function() {
      var _this = this;
      this.model = new CurrentTrackModel();
      this.model.on('change', function() {
        console.log("CHANGE");
        return _this.render();
      });
      this.views = {
        coverartView: new CoverartView(this.model),
        metadataView: new MetadataView(this.model)
      };
      return this;
    };

    CurrentTrackView.prototype.render = function() {
      var view;
      for (view in this.views) {
        this.views[view].render();
      }
      return this;
    };

    CurrentTrackView.prototype.remove = function() {
      var view, _results;
      _results = [];
      for (view in this.views) {
        _results.push(this.views[view].remove());
      }
      return _results;
    };

    return CurrentTrackView;

  })(Backbone.View);
  return CurrentTrackView;
});
